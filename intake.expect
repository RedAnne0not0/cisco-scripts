#!/usr/bin/expect -f

# Cisco Device Intake Script
# Usage: ./intake.expect <device-name> <device-type> [serial-port]
# Example: ./intake.expect switch1 switch /dev/ttyUSB0
# Device types: switch, router

# Check arguments
if {$argc < 2} {
    puts "Usage: $argv0 <device-name> <device-type> \[serial-port\]"
    puts "Example: $argv0 switch1 switch /dev/ttyUSB0"
    puts "         $argv0 router1 router /dev/ttyUSB1"
    puts "Device types: switch, router"
    puts "Default serial port: /dev/ttyUSB0"
    exit 1
}

set device [lindex $argv 0]
set device_type [lindex $argv 1]
set serial_port "/dev/ttyUSB0"

if {$argc >= 3} {
    set serial_port [lindex $argv 2]
}

# Validate device type
if {$device_type != "switch" && $device_type != "router"} {
    puts "Error: device-type must be 'switch' or 'router'"
    puts "You provided: $device_type"
    exit 1
}

set timeout 30
set output_file "${device}-intake-[timestamp -format %Y%m%d-%H%M%S].txt"

puts "Starting intake for device: $device"
puts "Device type: $device_type" 
puts "Serial port: $serial_port"
puts "Output file: $output_file"
puts "----------------------------------------"

log_file $output_file
spawn minicom -D $serial_port

# Handle initial boot prompts and connection
expect {
    "initial configuration dialog" {
        send "no\r"
        exp_continue
    }
    "terminate autoinstall" {
        send "yes\r"
        exp_continue
    }
    "Press RETURN to get started" {
        send "\r"
        exp_continue
    }
    "Username:" {
        send "\r"
        exp_continue
    }
    "Password:" {
        send "\r"
        exp_continue
    }
    ">" {
        # User mode prompt - good to proceed
    }
    "#" {
        # Already in privileged mode - good to proceed
    }
    timeout {
        puts "Timeout waiting for prompt, sending Enter..."
        send "\r"
        exp_continue
    }
}

# Try to get to privileged mode
expect {
    ">" {
        send "enable\r"
        expect {
            "Password:" {
                send "\r"
                expect "#"
            }
            "#" {
                # Successfully enabled
            }
            timeout {
                puts "Error: Could not enter privileged mode"
                exit 1
            }
        }
    }
    "#" {
        # Already in privileged mode
    }
}

# Set terminal parameters
send "terminal length 0\r"
expect "#"
send "terminal width 512\r"
expect "#"

puts "Connected and configured terminal settings"
puts "Running intake commands..."

# first clock capture + RTC sanity check
run_cmd "show clock detail"

# Define intake commands based on device type
if {$device_type == "switch"} {
    set commands {
        "show version"
        "show boot"
        "show startup-config"
        "show vlan brief"
        "show running-config | include hostname"
        "dir flash:"
        "show inventory"
        "show sdm prefer"
        "show env all"
        "show interfaces status"
        "show ip interface brief"
        "show post"
        "show processes cpu sorted"
        "show memory statistics"
        "show clock detail"
        "show license udi"
        "show license all"
        "show stack-power"
        "show switch detail"
        "show switch stack-ring speed"
    }
    puts "Using switch command set"
} elseif {$device_type == "router"} {
    set commands {
        "show version"
        "show bootvar"
        "show startup-config"
        "dir bootflash:"
        "show inventory"
        "show platform"
        "show ip interface brief"
        "show license udi"
        "show license all"
        "show environment all"
        "show diag"
        "show processes cpu sorted"
        "show memory statistics"
        "show clock detail"
        "dir usb0:"
        "show rom-monitor"
    }
    puts "Using router command set"
}

foreach cmd $commands {
    puts "Executing: $cmd"
    send "$cmd\r"
    expect {
        -re {\r\n% (Invalid|Ambiguous|Incomplete).*} {
            puts $log "ERROR: $cmd -> $expect_out(0,string)"
            exp_continue
        }
        -re {#\s*$} { }
    }
        # Small delay between commands
    sleep 1
}

# second capture
run_cmd "show clock detail"

puts "All commands completed"
puts "Cleaning up..."

# Exit gracefully
send "exit\r"
expect eof

puts "----------------------------------------"
puts "Intake completed successfully!"
puts "Output saved to: $output_file"

# Display file size and line count
catch {exec wc -l $output_file} result
puts "File statistics: $result"
